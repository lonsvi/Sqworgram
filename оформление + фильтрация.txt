using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Threading;

namespace _1ДЛЯ_ТЕСТА_ДИЗАЙНА_ПРОСТО
{
    public partial class ChatsPage : Page
    {
        private readonly DatabaseHelper dbHelper;
        private readonly int currentUserId;
        private readonly string currentUserLogin;
        private string currentAvatarUrl;
        private int currentChatId = -1;
        private readonly Dictionary<string, int> chatMapping = new Dictionary<string, int>();
        private DispatcherTimer messageTimer;
        private int displayedMessageCount = 0;
        private readonly TranslationService translationService;
        private bool isFavoriteMode = false;

        public ChatsPage(int userId, string userLogin, string avatarUrl = null)
        {
            InitializeComponent();
            dbHelper = new DatabaseHelper();
            currentUserId = userId;
            currentUserLogin = userLogin;
            currentAvatarUrl = avatarUrl;
            translationService = new TranslationService();
            LoadChats();

            messageTimer = new DispatcherTimer();
            messageTimer.Interval = TimeSpan.FromSeconds(5);
            messageTimer.Tick += MessageTimer_Tick;

            this.Loaded += ChatsPage_Loaded;
        }

        private void ChatsPage_Loaded(object sender, RoutedEventArgs e)
        {
            var currentUser = dbHelper.GetUserById(currentUserId);
            if (currentUser != null)
            {
                currentAvatarUrl = currentUser.AvatarUrl;
            }
            LoadChats();
        }

        private void MessageTimer_Tick(object sender, EventArgs e)
        {
            if (currentChatId != -1)
            {
                LoadNewMessages();
            }
        }

        private void LoadNewMessages()
        {
            var messagesInDb = dbHelper.GetMessages(currentChatId);
            if (messagesInDb.Count != displayedMessageCount)
            {
                string selectedChat = (ChatListBox.SelectedItem as dynamic)?.Login;
                if (selectedChat != null)
                {
                    OpenChat(selectedChat);
                }
            }
        }

        private void LoadChats(string searchText = "")
        {
            string previouslySelectedChat = (ChatListBox.SelectedItem as dynamic)?.Login;

            ChatListBox.Items.Clear();
            chatMapping.Clear();

            var users = dbHelper.GetUsers(currentUserId);
            var favoriteChats = dbHelper.GetFavoriteChats(currentUserId).ToHashSet();

            foreach (var user in users)
            {
                int chatId = dbHelper.GetOrCreateChat(currentUserId, user.Id);
                bool matchesSearch = string.IsNullOrEmpty(searchText) || 
                                  user.Login.ToLower().Contains(searchText.ToLower());
                bool matchesFavorite = !isFavoriteMode || favoriteChats.Contains(chatId);

                if (matchesSearch && matchesFavorite)
                {
                    ChatListBox.Items.Add(new { Login = user.Login, AvatarUrl = user.AvatarUrl });
                    chatMapping[user.Login] = chatId;
                }
            }

            if (ChatListBox.Items.Count > 0)
            {
                if (previouslySelectedChat != null)
                {
                    foreach (var item in ChatListBox.Items)
                    {
                        if ((item as dynamic).Login == previouslySelectedChat)
                        {
                            ChatListBox.SelectedItem = item;
                            break;
                        }
                    }
                }
                if (ChatListBox.SelectedItem == null)
                {
                    ChatListBox.SelectedIndex = 0;
                }
            }
            else
            {
                ChatListBox.SelectedItem = null;
                ChatArea.Visibility = Visibility.Collapsed;
                ChatPlaceholder.Visibility = Visibility.Visible;
                currentChatId = -1;
            }
        }

        private void SearchTextBox_TextChanged(object sender, TextChangedEventArgs e)
        {
            string searchText = SearchTextBox.Text;
            if (searchText == "Поиск" && !SearchTextBox.IsFocused)
            {
                LoadChats(); // Показываем все чаты, если это placeholder
            }
            else
            {
                LoadChats(searchText); // Фильтруем по введенному тексту
            }
        }

        private void ChatListBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            messageTimer?.Stop();
            if (ChatListBox.SelectedItem != null)
            {
                string selectedChat = (ChatListBox.SelectedItem as dynamic).Login;
                if (chatMapping.ContainsKey(selectedChat))
                {
                    currentChatId = chatMapping[selectedChat];
                    OpenChat(selectedChat);
                }
            }
            else
            {
                ChatArea.Visibility = Visibility.Collapsed;
                ChatPlaceholder.Visibility = Visibility.Visible;
                currentChatId = -1;
            }
        }

        private void OpenChat(string chatName)
        {
            ChatPlaceholder.Visibility = Visibility.Collapsed;
            ChatArea.Visibility = Visibility.Visible;
            MessagesPanel.Children.Clear();

            var messages = dbHelper.GetMessages(currentChatId).OrderBy(m => m.Timestamp).ToList();
            foreach (var message in messages)
            {
                bool isSentByMe = message.SenderId == currentUserId;
                AddMessageToUI(message.MessageText, isSentByMe, message.Timestamp);
            }

            displayedMessageCount = messages.Count;
            messageTimer?.Start();
        }

        private void AddMessageToUI(string message, bool isSentByMe, DateTime timestamp)
        {
            StackPanel messageContainer = new StackPanel
            {
                Margin = new Thickness(5),
                HorizontalAlignment = isSentByMe ? HorizontalAlignment.Right : HorizontalAlignment.Left,
                MaxWidth = 450
            };

            StackPanel contentPanel = new StackPanel
            {
                Orientation = Orientation.Horizontal,
                HorizontalAlignment = isSentByMe ? HorizontalAlignment.Right : HorizontalAlignment.Left
            };

            Border messageBorder = new Border
            {
                CornerRadius = new CornerRadius(10),
                Background = isSentByMe ? new SolidColorBrush(Color.FromRgb(85, 85, 85)) : new SolidColorBrush(Color.FromRgb(68, 68, 68)),
                Padding = new Thickness(10),
                Margin = new Thickness(0, 2, 5, 2)
            };

            TextBlock messageBlock = new TextBlock
            {
                Text = message,
                Foreground = Brushes.White,
                TextWrapping = TextWrapping.Wrap,
                FontFamily = new FontFamily("Inter"),
                FontSize = 14
            };

            messageBorder.Child = messageBlock;

            Button translateButton = new Button
            {
                Content = "Перевести",
                Style = (Style)FindResource("ModernButtonStyle"),
                Tag = message,
                Cursor = Cursors.Hand
            };
            translateButton.Click += TranslateButton_Click;

            if (isSentByMe)
            {
                contentPanel.Children.Add(translateButton);
                contentPanel.Children.Add(messageBorder);
            }
            else
            {
                contentPanel.Children.Add(messageBorder);
                contentPanel.Children.Add(translateButton);
            }

            TextBlock timestampBlock = new TextBlock
            {
                Text = timestamp.ToString("HH:mm"),
                Foreground = Brushes.Gray,
                FontSize = 10,
                HorizontalAlignment = isSentByMe ? HorizontalAlignment.Right : HorizontalAlignment.Left,
                Margin = new Thickness(0, 0, 0, 5),
                FontFamily = new FontFamily("Inter")
            };

            messageContainer.Children.Add(contentPanel);
            messageContainer.Children.Add(timestampBlock);
            MessagesPanel.Children.Add(messageContainer);

            ChatScrollViewer.ScrollToEnd();
        }

        private async void TranslateButton_Click(object sender, RoutedEventArgs e)
        {
            Button translateButton = sender as Button;
            if (translateButton == null) return;

            string messageText = translateButton.Tag as string;
            if (string.IsNullOrEmpty(messageText)) return;

            string direction = (TranslationDirectionComboBox.SelectedItem as ComboBoxItem)?.Content.ToString() ?? "EN → RU";
            string sourceLanguage = direction == "EN → RU" ? "en" : "ru";
            string targetLanguage = direction == "EN → RU" ? "ru" : "en";

            string translatedText = await translationService.TranslateTextAsync(messageText, sourceLanguage, targetLanguage);

            var buttonParent = translateButton.Parent as StackPanel;
            var messageContainer = buttonParent?.Parent as StackPanel;
            if (messageContainer != null)
            {
                TextBlock translatedBlock = new TextBlock
                {
                    Text = $"[Перевод]: {translatedText}",
                    Foreground = Brushes.LightGray,
                    TextWrapping = TextWrapping.Wrap,
                    FontFamily = new FontFamily("Inter"),
                    FontSize = 12,
                    Margin = new Thickness(10, 0, 0, 5)
                };
                messageContainer.Children.Add(translatedBlock);
                ChatScrollViewer.ScrollToEnd();
            }
        }

        private void SendMessage_Click(object sender, RoutedEventArgs e)
        {
            if (!string.IsNullOrEmpty(MessageTextBox.Text) && currentChatId != -1)
            {
                string newMessage = MessageTextBox.Text;
                DateTime timestamp = DateTime.Now;

                dbHelper.SaveMessage(currentChatId, currentUserId, newMessage, timestamp);
                string selectedChat = (ChatListBox.SelectedItem as dynamic)?.Login;
                if (selectedChat != null)
                {
                    OpenChat(selectedChat);
                }
                MessageTextBox.Clear();
            }
        }

        private void SearchTextBox_GotFocus(object sender, RoutedEventArgs e)
        {
            TextBox textBox = sender as TextBox;
            if (textBox.Text == "Поиск")
            {
                textBox.Text = "";
                textBox.Foreground = Brushes.White;
            }
        }

        private void SearchTextBox_LostFocus(object sender, RoutedEventArgs e)
        {
            TextBox textBox = sender as TextBox;
            if (string.IsNullOrWhiteSpace(textBox.Text))
            {
                textBox.Text = "Поиск";
                textBox.Foreground = Brushes.Gray;
            }
        }

        private void SettingsButton_Click(object sender, MouseButtonEventArgs e)
        {
            NavigationService?.Navigate(new SettingsPage(currentUserId, currentUserLogin, currentAvatarUrl));
        }

        private void ChatListBox_MouseRightButtonUp(object sender, MouseButtonEventArgs e)
        {
            if (ChatListBox.SelectedItem != null)
            {
                string selectedChat = (ChatListBox.SelectedItem as dynamic).Login;
                int chatId = chatMapping[selectedChat];
                var favoriteChats = dbHelper.GetFavoriteChats(currentUserId).ToHashSet();

                ContextMenu contextMenu = new ContextMenu();
                MenuItem favoriteItem = new MenuItem
                {
                    Header = favoriteChats.Contains(chatId) ? "Убрать из избранного" : "Добавить в избранное"
                };
                favoriteItem.Click += (s, args) =>
                {
                    if (favoriteChats.Contains(chatId))
                    {
                        dbHelper.RemoveFavoriteChat(currentUserId, chatId);
                    }
                    else
                    {
                        dbHelper.AddFavoriteChat(currentUserId, chatId);
                    }
                    LoadChats(SearchTextBox.Text == "Поиск" ? "" : SearchTextBox.Text);
                };
                contextMenu.Items.Add(favoriteItem);
                contextMenu.IsOpen = true;
            }
        }

        private void ToggleFavoriteMode_Click(object sender, RoutedEventArgs e)
        {
            isFavoriteMode = !isFavoriteMode;
            FavoriteButton.Content = isFavoriteMode ? "Все чаты" : "Избранное";
            LoadChats(SearchTextBox.Text == "Поиск" ? "" : SearchTextBox.Text);
        }
    }
}

































<Page x:Class="_1ДЛЯ_ТЕСТА_ДИЗАЙНА_ПРОСТО.ChatsPage"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:local="clr-namespace:_1ДЛЯ_ТЕСТА_ДИЗАЙНА_ПРОСТО"
      Title="ChatsPage">
    <Page.Resources>
        <local:AvatarUrlToImageSourceConverter x:Key="AvatarUrlConverter"/>

        <!-- Стиль кнопок -->
        <Style x:Key="ModernButtonStyle" TargetType="Button">
            <Setter Property="Background" Value="#FF2A2D3E"/>
            <Setter Property="Foreground" Value="#FFE6E6E6"/>
            <Setter Property="FontSize" Value="14"/>
            <Setter Property="FontFamily" Value="Inter"/>
            <Setter Property="Padding" Value="12,6"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Cursor" Value="Hand"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border x:Name="border"
                                Background="{TemplateBinding Background}"
                                CornerRadius="8"
                                Padding="{TemplateBinding Padding}">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="border" Property="Background" Value="#FF383C52"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter TargetName="border" Property="Background" Value="#FF454A66"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- Стиль ComboBox -->
        <Style x:Key="ModernComboBoxStyle" TargetType="ComboBox">
            <Setter Property="Background" Value="#FF2A2D3E"/>
            <Setter Property="Foreground" Value="#FFE6E6E6"/>
            <Setter Property="FontSize" Value="13"/>
            <Setter Property="FontFamily" Value="Inter"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Padding" Value="10,6"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ComboBox">
                        <Grid>
                            <ToggleButton x:Name="ToggleButton"
                                        Background="{TemplateBinding Background}"
                                        BorderThickness="0"
                                        IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                        ClickMode="Press">
                                <ToggleButton.Template>
                                    <ControlTemplate TargetType="ToggleButton">
                                        <Border x:Name="Border"
                                                Background="{TemplateBinding Background}"
                                                CornerRadius="8"
                                                Padding="{TemplateBinding Padding}">
                                            <Grid>
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="*"/>
                                                    <ColumnDefinition Width="Auto"/>
                                                </Grid.ColumnDefinitions>
                                                <ContentPresenter Grid.Column="0"
                                                                HorizontalAlignment="Left"
                                                                VerticalAlignment="Center"/>
                                                <Path Grid.Column="1"
                                                      Fill="#FFE6E6E6"
                                                      Data="M 0 0 L 5 5 L 10 0 Z"
                                                      Margin="8,0,8,0"
                                                      VerticalAlignment="Center"/>
                                            </Grid>
                                        </Border>
                                        <ControlTemplate.Triggers>
                                            <Trigger Property="IsMouseOver" Value="True">
                                                <Setter TargetName="Border" Property="Background" Value="#FF383C52"/>
                                            </Trigger>
                                            <Trigger Property="IsChecked" Value="True">
                                                <Setter TargetName="Border" Property="Background" Value="#FF454A66"/>
                                            </Trigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </ToggleButton.Template>
                            </ToggleButton>
                            <Popup x:Name="Popup"
                                 Placement="Bottom"
                                 IsOpen="{TemplateBinding IsDropDownOpen}"
                                 AllowsTransparency="True"
                                 PopupAnimation="Fade">
                                <Border Background="#FF2A2D3E"
                                        CornerRadius="8"
                                        BorderThickness="0"
                                        Margin="0,4,0,0">
                                    <ScrollViewer Margin="0">
                                        <StackPanel IsItemsHost="True"/>
                                    </ScrollViewer>
                                </Border>
                            </Popup>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style TargetType="ComboBoxItem">
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Foreground" Value="#FFE6E6E6"/>
            <Setter Property="Padding" Value="10,6"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ComboBoxItem">
                        <Border x:Name="ItemBorder"
                                Background="{TemplateBinding Background}"
                                Padding="{TemplateBinding Padding}">
                            <ContentPresenter/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="ItemBorder" Property="Background" Value="#FF383C52"/>
                            </Trigger>
                            <Trigger Property="IsSelected" Value="True">
                                <Setter TargetName="ItemBorder" Property="Background" Value="#FF454A66"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </Page.Resources>

    <Border Background="#FF1E212D">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="320"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>

            <!-- Левая панель -->
            <Border Grid.Column="0" Background="#FF252836">
                <Grid Margin="12">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="*"/>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>

                    <!-- Поиск -->
                    <Border Grid.Row="0" 
        Background="#FF2A2D3E" 
        CornerRadius="8" 
        Height="40">
                        <TextBox x:Name="SearchTextBox"
             Text="Поиск"
             Foreground="#FF8F95A6"
             Background="Transparent"
             BorderThickness="0"
             FontSize="14"
             FontFamily="Inter"
             VerticalContentAlignment="Center"
             Padding="12,0,12,0"
             GotFocus="SearchTextBox_GotFocus"
             LostFocus="SearchTextBox_LostFocus"
             TextChanged="SearchTextBox_TextChanged">
                            <TextBox.Style>
                                <Style TargetType="TextBox">
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="TextBox">
                                                <Border Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}">
                                                    <ScrollViewer x:Name="PART_ContentHost"/>
                                                </Border>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </TextBox.Style>
                        </TextBox>
                    </Border>

                    <!-- Кнопка Избранное -->
                    <Button x:Name="FavoriteButton" 
                            Grid.Row="1" 
                            Content="Избранное"
                            Margin="0,8,0,0"
                            Style="{StaticResource ModernButtonStyle}"
                            Click="ToggleFavoriteMode_Click"/>

                    <!-- Список чатов -->
                    <ListBox x:Name="ChatListBox"
                           Grid.Row="2"
                           Margin="0,8,0,0"
                           Background="Transparent"
                           BorderThickness="0"
                           Foreground="#FFE6E6E6"
                           FontFamily="Inter"
                           SelectionChanged="ChatListBox_SelectionChanged"
                           MouseRightButtonUp="ChatListBox_MouseRightButtonUp">
                        <ListBox.ItemTemplate>
                            <DataTemplate>
                                <Border Background="#FF2A2D3E" 
                                        CornerRadius="8" 
                                        Padding="10" 
                                        Margin="0,0,0,6">
                                    <Border.Style>
                                        <Style TargetType="Border">
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=ListBoxItem}, Path=IsSelected}" Value="True">
                                                    <Setter Property="Background" Value="#FF383C52"/>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </Border.Style>
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="*"/>
                                        </Grid.ColumnDefinitions>

                                        <Ellipse Grid.Column="0" 
                                               Width="36" 
                                               Height="36" 
                                               Fill="#FF454A66">
                                            <Ellipse.OpacityMask>
                                                <ImageBrush ImageSource="{Binding AvatarUrl, Converter={StaticResource AvatarUrlConverter}}"/>
                                            </Ellipse.OpacityMask>
                                        </Ellipse>

                                        <TextBlock Grid.Column="1" 
                                                 Text="{Binding Login}" 
                                                 Foreground="#FFE6E6E6" 
                                                 Margin="10,0,0,0"
                                                 VerticalAlignment="Center" 
                                                 FontSize="14"
                                                 TextTrimming="CharacterEllipsis"/>
                                    </Grid>
                                </Border>
                            </DataTemplate>
                        </ListBox.ItemTemplate>
                    </ListBox>

                    <!-- Настройки -->
                    <Border Grid.Row="3" 
                            Width="40" 
                            Height="40" 
                            CornerRadius="20"
                            Background="#FF2A2D3E"
                            Margin="0,8,0,0">
                        <TextBlock Text="⚙" 
                                 FontSize="18"
                                 VerticalAlignment="Center"
                                 HorizontalAlignment="Center"
                                 Foreground="#FFE6E6E6"
                                 MouseLeftButtonDown="SettingsButton_Click"/>
                    </Border>
                </Grid>
            </Border>

            <!-- Правая панель -->
            <Grid Grid.Column="1" Margin="12">
                <Border x:Name="ChatPlaceholder"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        Background="#FF252836"
                        CornerRadius="12"
                        Padding="20,12">
                    <TextBlock Text="Выберите чат для общения"
                             Foreground="#FF8F95A6"
                             FontSize="16"
                             FontFamily="Inter"
                             TextAlignment="Center"/>
                </Border>

                <Grid x:Name="ChatArea" Visibility="Collapsed">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="*"/>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>

                    <ComboBox x:Name="TranslationDirectionComboBox"
                            Grid.Row="0"
                            Width="120"
                            Style="{StaticResource ModernComboBoxStyle}">
                        <ComboBoxItem Content="EN → RU" IsSelected="True"/>
                        <ComboBoxItem Content="RU → EN"/>
                    </ComboBox>

                    <ScrollViewer x:Name="ChatScrollViewer" 
                                Grid.Row="1" 
                                VerticalScrollBarVisibility="Auto"
                                Margin="0,8,0,0">
                        <StackPanel x:Name="MessagesPanel"/>
                    </ScrollViewer>

                    <Border Grid.Row="2" 
                            Background="#FF252836" 
                            CornerRadius="12"
                            Padding="8">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>

                            <TextBox x:Name="MessageTextBox"
                                   Grid.Column="0"
                                   Background="#FF2A2D3E"
                                   Foreground="#FFE6E6E6"
                                   CaretBrush="#FFE6E6E6"
                                   BorderThickness="0"
                                   FontSize="14"
                                   FontFamily="Inter"
                                   Padding="12"
                                   VerticalContentAlignment="Center"
                                   Margin="0,0,8,0">
                                <TextBox.Style>
                                    <Style TargetType="TextBox">
                                        <Setter Property="Template">
                                            <Setter.Value>
                                                <ControlTemplate TargetType="TextBox">
                                                    <Border Background="{TemplateBinding Background}"
                                                            BorderBrush="{TemplateBinding BorderBrush}"
                                                            BorderThickness="{TemplateBinding BorderThickness}"
                                                            CornerRadius="8">
                                                        <ScrollViewer x:Name="PART_ContentHost"/>
                                                    </Border>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </Style>
                                </TextBox.Style>
                            </TextBox>

                            <Button Grid.Column="1"
                                  Content="Отправить"
                                  Style="{StaticResource ModernButtonStyle}"
                                  Click="SendMessage_Click"/>
                        </Grid>
                    </Border>
                </Grid>
            </Grid>
        </Grid>
    </Border>
</Page>



